#!/usr/bin/env ruby

# Run import
#
# $ rake db:drop RACK_ENV=production
# $ rake db:bootstrap RACK_ENV=production
# $ env RACK_ENV=production REPO=[PATH] bundle exec ./script/import_spec_repo

# Push:
#
# $ heroku pg:reset DATABASE_URL
# $ pg_dump -xO trunk_cocoapods_org_production | psql `heroku config:get DATABASE_URL`

exit(1) unless ENV['REPO'] || system('pod repo update master')

ENV['RACK_ENV'] ||= 'development'

require 'rubygems'
require 'rugged'

$LOAD_PATH.unshift(File.expand_path('../../', __FILE__))
require 'config/init'
require 'cocoapods-core'
require 'app/models/commit/import'

require 'rfc822'
module RFC822
  def self.mx_records(_address)
    [MXRecord.new(20, 'mail.example.com')]
  end
end

repo = File.expand_path(ENV.fetch('REPO', '~/.cocoapods/repos/master'))
REPO = Rugged::Repository.new(repo)
HEAD_SHA = REPO.head.target

LOG_MESSAGE_REFERENCE = 'spec-repo-import'.freeze

module Pod
  module TrunkApp
    class Commit
      module Import
        def self.mock_spec(commit_sha, file)
          name = File.basename(file, File.extname(file))
          version = File.basename(File.dirname(file))
          begin
            ::Pod::Version.new(version)
          rescue ArgumentError
            version = '0.0.1'
            LogMessage.create(
              :reference => LOG_MESSAGE_REFERENCE,
              :level => :warning,
              :message => "Fixing the version of the spec in file `#{file}` " \
                          "@ `#{commit_sha}`.",
            )
          end
          puts "[!] Unparsable spec: #{name} <#{version}>"
          ::Pod::Specification.new do |s|
            s.name = name
            s.version = version
            s.summary = 'Unparsable at `trunk` import time.'
          end
        end

        def self.fetch_spec(commit_sha, file)
          commit = REPO.lookup(commit_sha)
          entry = commit.tree.path(file)
          blob = REPO.lookup(entry[:oid])
          data = blob.text
          data.sub!(/\.version\s*=\s*["']v(.+?)["']/, '.version = "\1"')
          spec = ::Pod::Specification.from_string(data, file)
          if spec.name.nil?
            spec.name = File.basename(file, File.extname(file))
            puts "[!] Fixing name of spec: #{spec.name}"
            LogMessage.create(
              :reference => LOG_MESSAGE_REFERENCE,
              :level => :warning,
              :message => "Fixing the name of the spec in file `#{file}` " \
                          "@ `#{commit_sha}`.",
            )
          end
          if spec.attributes_hash['version'].nil?
            spec.attributes_hash['version'] = File.basename(File.dirname(file))
            puts "[!] Fixing version of spec: #{spec.name} <#{spec.version}>"
            LogMessage.create(
              :reference => LOG_MESSAGE_REFERENCE,
              :level => :warning,
              :message => "Fixing the version of the spec in file `#{file}` " \
                          "@ `#{commit_sha}`.",
            )
          end
          spec
        rescue Rugged::TreeError
          mock_spec(commit_sha, file)
        rescue ::Pod::DSLError, ::Pod::Informative
          LogMessage.create(
            :reference => LOG_MESSAGE_REFERENCE,
            :level => :warning,
            :message => "The file `#{file}` @ `#{commit_sha}` was unparsable.",
          )
          mock_spec(commit_sha, file)
        end

        # TODO: These should be moved into the real Import module at some point
        # when we've decided how to properly handle it.

        def self.handle_renamed(spec, pod, committer, commit_sha)
          if commit = handle_added(spec, pod, committer, commit_sha)
            commit.update(:renamed_file_during_import => true)
          end
        end

        def self.handle_deleted(spec, pod, committer, commit_sha)
          commit = handle_modified(spec, pod, committer, commit_sha)
          commit.update(
            :deleted_file_during_import => true,
            :specification_data => '{}',
          )
        end
      end
    end
  end
end

def changes(sha)
  output = `git diff-tree --no-commit-id --find-renames --name-status -r #{sha}`
  output.split("\n").map do |line|
    status, file, to = line.split("\t")
    case status
    when 'A' then [:added, file]
    when 'M' then [:modified, file]
    when 'D' then [:deleted, file]
    when /R\d{3}/ then [:renamed, to]
    else
      raise "Unknown status: #{status}"
    end
  end
end

walker = Rugged::Walker.new(REPO)
walker.sorting(Rugged::SORT_TOPO | Rugged::SORT_REVERSE)
walker.push(REPO.head.target)

unclaimed_owner = Pod::TrunkApp::Owner.unclaimed

Dir.chdir(REPO.workdir) do
  walker.each do |commit|
    # Omit root and merge commits
    if commit.parent_oids.size != 1
      next
    end

    puts '----------------------------------------'
    sha = commit.oid
    committer_email = commit.author[:email]
    committer_name = commit.author[:name]
    p [sha, committer_email, committer_name]
    stats = changes(commit.oid)

    if sha == '8dd7386313af0493b31d62e9ce9d697a25a63025'
      puts '[!] Skipping because it is known to be an empty file'
      next
    end

    original_committer_email = committer_email
    case committer_email
    when 'fabio@discontinity.it'
      committer_email = 'fabio@discontinuity.it'
    when 'mo at mobarak dot com'
      committer_email = 'mo@mobarak.com'
    when /jasper@apssquick\.ly/i
      committer_email = 'jasper@appsquick.ly'
    when 'my@fake.email', /@example\.com$/i, /@server\.com$/i, /\.(local|lan)$/i
      # Local addresses are considered unknown and thus unclaimed.
      puts '[!] Setting email to that of the unclaimed owner.'
      committer_email = Pod::TrunkApp::Owner::UNCLAIMED_OWNER_EMAIL
    else
      unless committer_email =~ RFC822::EMAIL
        # Invalid addresses are considered unknown and thus unclaimed.
        puts '[!] Setting email to that of the unclaimed owner.'
        committer_email = Pod::TrunkApp::Owner::UNCLAIMED_OWNER_EMAIL
      end
    end
    if original_committer_email != committer_email
      Pod::TrunkApp::LogMessage.create(
        :reference => LOG_MESSAGE_REFERENCE,
        :level => :warning,
        :message => "The committer email `#{original_committer_email}` @ " \
                    " `#{sha}` was unusable and set to that of the " \
                    '`unclaimed` owner.',
      )
    end

    stats.each do |status, file|
      next unless file =~ /\.podspec(.json)?\z/
      next if sha == HEAD_SHA && status == :deleted

      p [status, file]

      # Create the Pod *before* sending it off to Import, otherwise the
      # committer becomes an owner.
      spec = Pod::TrunkApp::Commit::Import.fetch_spec(sha, file)
      pod = Pod::TrunkApp::Pod.find_or_create(:name => spec.name)
      # Set all pods to be owned by the unclaimed owner.
      pod.add_owner(unclaimed_owner) if pod.was_created?

      # Now perform the actual import.
      Pod::TrunkApp::Commit::Import.import(sha, status, [file],
                                           committer_email, committer_name)
    end

    puts
  end
end

# Mark the OpenSSL pod as being owned.
# See https://github.com/CocoaPods/trunk.cocoapods.org/issues/52
openssl = Pod::TrunkApp::Pod.find(:name => 'OpenSSL')
openssl_owner = Pod::TrunkApp::Owner.find_by_email('github@fredericjacobs.com')
openssl_owner.add_pod(openssl)
openssl.remove_owner(unclaimed_owner)

# Finally, clear all log messages that were generated during importing and are
# only relavent when actually receiving a webhook POST from GitHub.
Pod::TrunkApp::LogMessage.where('pod_version_id != 0').delete
